@page "/"
@using Microsoft.Fast.Components.FluentUI
@using Microsoft.Maui.Controls
@using Marimo.WindowsCalculator.Models
@using Marimo.WindowsCalculator.ViewModels
@inject CalculatorViewModel ViewModel

<FluentBodyContent class="body-content">
    <div class="layout-root" >
        <div class="header">
            <div class="icons">
                <FluentIcon Value="@(new Icons.Filled.Size24.TextAlignJustify())" class="reduced-size" />

                <FluentIcon Value="@(new Icons.Filled.Size48.History())" class="icon-small" />
            </div>
            <div GridRow="2">3 + 5</div>
            <div GridRow="2">3 + 5</div>
            <div GridRow="2">3 + 5</div>
        </div>
        <div class="body">
            <div class="calculation-result">
                @ViewModel.DisplaiedNumber
            </div>
        </div>
    </div>
</FluentBodyContent>
<script>
function setDivHeight() {
    const div = document.querySelector('.layout-root');
    div.style.height = `${document.documentElement.clientHeight}px`;
}

    window.addEventListener('resize', setDivHeight);
    window.addEventListener('load', setDivHeight);
</script>
<style>
    html body {
        overflow: hidden;
    }

    .body, body-content{

        overflow-x: hidden;
        overflow-y: hidden;
    }

    .header {
        
    }

    .icons {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .layout-root {
        border: 1px solid black;
        border-radius: 5px;
        width: 100vw;
        height: 100svw;
    }

    .calculation-result{
        flex : 1;
    }

    .reduced-size {
        transform: scale(0.8);
        transform-origin: center;
    }

    .icon-small {
        transform: scale(0.4);
        transform-origin: center;
    }
</style>
@code {

    private static double windowWidth;
    private static double windowHeight;

    private static Home? self;

    protected override void OnInitialized()
    {
        self = this;

        StaticClass.ViewModel = ViewModel;

        ViewModel.PropertyChanged += (sender, e) =>
        {
            InvokeAsync(StateHasChanged);
        };
    }


    public static class StaticClass
    {


        
        public static CalculatorViewModel? ViewModel { get; set; }

        [JSInvokable("HandleKeyDown")]
        public static void HandleKeyDown(string key, bool ctrl)
        {
            
            ViewModel?.PushKeybord?.Execute(
            (ctrl, key) switch
            {
                (false, "0") => InputAction.Zero,
                (false, "1") => InputAction.One,
                (false, "2") => InputAction.Two,
                (false, "3") => InputAction.Three,
                (false, "4") => InputAction.Four,
                (false, "5") => InputAction.Five,
                (false, "6") => InputAction.Six,
                (false, "7") => InputAction.Seven,
                (false, "8") => InputAction.Eight,
                (false, "9") => InputAction.Nine,
                (false, ".") => InputAction.Dot,
                (false, "+") => InputAction.Plus,
                (false, "-") => InputAction.Minus,
                (false, "*") => InputAction.Multiply,
                (false, "/") => InputAction.Divide,
                (false, "Enter)") or (false, "=") => InputAction.Equal,
                (false, "Escape") => InputAction.C,
                (false, "Delete") => InputAction.CE,
                (false, "Backspace") => InputAction.Backspace,
                (true, "z") => InputAction.Undo,
                (true, "y") => InputAction.Redo,
                _ => throw new NotSupportedException()
            });
        }
    }
    
}