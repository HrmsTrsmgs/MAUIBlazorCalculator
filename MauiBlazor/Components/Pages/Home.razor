@page "/"
@using Microsoft.Fast.Components.FluentUI
@using Marimo.WindowsCalculator.Models
@using Marimo.WindowsCalculator.ViewModels
@inject CalculatorViewModel ViewModel

<FluentBodyContent class="body-content">
    <div class="layout-root">
        <div class="content-header">
            <div class="icons">
                <FluentIcon class="icon menu-icon" Value="@(new Icons.Filled.Size24.TextAlignJustify())" />
                <FluentIcon class="icon history-icon" Value="@(new Icons.Filled.Size48.History())" />
            </div>
            <div class="expression">3 + 5</div>
        </div>
        <div class="content-body">

            <div class="calculation-result">
                @ViewModel.DisplaiedNumber
            </div>
            <div class="keys">
                <FluentButton class="fluent-button font-small">CE</FluentButton>
                <FluentButton class="fluent-button font-small">C</FluentButton>
                <FluentButton class="fluent-button font-small">⌫</FluentButton>
                <FluentButton class="fluent-button font-large">÷</FluentButton>
                <FluentButton class="fluent-button">7</FluentButton>
                <FluentButton class="fluent-button">8</FluentButton>
                <FluentButton class="fluent-button">9</FluentButton>
                <FluentButton class="fluent-button">×</FluentButton>
                <FluentButton class="fluent-button">4</FluentButton>
                <FluentButton class="fluent-button">5</FluentButton>
                <FluentButton class="fluent-button">6</FluentButton>
                <FluentButton class="fluent-button font-large">-</FluentButton>
                <FluentButton class="fluent-button">1</FluentButton>
                <FluentButton class="fluent-button">2</FluentButton>
                <FluentButton class="fluent-button">3</FluentButton>
                <FluentButton class="fluent-button font-large">+</FluentButton>
                <FluentButton class="fluent-button">Undo</FluentButton>
                <FluentButton class="fluent-button">0</FluentButton>
                <FluentButton class="fluent-button">.</FluentButton>
                <FluentButton class="fluent-button font-large">=</FluentButton>
            </div>
        </div>
    </div>
</FluentBodyContent>
<script>
    function setDivHeight() {
        const div = document.querySelector('.layout-root');
        div.style.height = `${document.documentElement.clientHeight}px`;
    }

    window.addEventListener('resize', setDivHeight);
    window.addEventListener('load', setDivHeight);
</script>
<style>
    body {
        overflow: hidden;
    }

    .layout-root {
        display: grid;
        grid-template-rows: auto 1fr;
        width: 100vw;
        height: 100vw;
    }

    .content-header {
        
    }

    .icons {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .calculation-result {
        flex: 1;
        border: 2px solid black;
        border-radius: 5px;
        overflow: hidden;
    }

    .icon {
        transform-origin: center;
    }


    .menu-icon {
        margin: 0 12px;
        transform: scale(0.8);
    }

    .history-icon {
        margin: 0 9px;
        transform: scale(0.5);
    }

    .expression {
        text-align: right;
        font-size: 14px;
        margin: 1px 28px;
    }

    .content-body {
        grid-row: 2;
        display: grid;
        grid-template-rows: 3fr 10fr;
        width: 100%;
        height: 100%;
        min-height: 0;
    }

    .calculation-result {
        display:grid;
        align-items: start;
        grid-column: 1 / -1;
        border: 2px solid black;
        border-radius: 5px;
        text-align: right;
        font-size: 44px;
        font-weight: 600;
        overflow: hidden;
    }

    .keys {
        
        display: grid;
        grid-template-rows: repeat(5, 1fr);
        grid-template-columns: repeat(4, 1fr);
        margin:2px;
    }

    .fluent-button {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-grow: 1;
        flex-shrink: 1;
        font-size: 18px;
        margin: 1px;
        border-radius: 4px;
        Q cursor: pointer;
        border: 1px solid transparent;
        transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
        overflow: hidden;
        min-height: 0;
    }

    @@media (prefers-color-scheme: light) {
        .fluent-button {
            background-color: #ffffff;
            color: #000000;
            border-color: #d3d3d3;
        }

            .fluent-button:hover {
                background-color: #f0f0f0;
                border-color: #a9a9a9;
            }
    }

    @@media (prefers-color-scheme: dark) {
        .fluent-button {
            background-color: #333333;
            color: #ffffff;
            border-color: #555555;
        }

            .fluent-button:hover {
                background-color: #444444;
                border-color: #777777;
            }
    }

    .font-large {
        font-size:32px;    
    }

    .font-small {
        font-size:13px;
    }

</style>
@code {

    private static double windowWidth;
    private static double windowHeight;

    private static Home? self;

    protected override void OnInitialized()
    {
        self = this;

        StaticClass.ViewModel = ViewModel;

        ViewModel.PropertyChanged += (sender, e) =>
        {
            InvokeAsync(StateHasChanged);
        };
    }


    public static class StaticClass
    {
        public static CalculatorViewModel? ViewModel { get; set; }

        [JSInvokable("HandleKeyDown")]
        public static void HandleKeyDown(string key, bool ctrl)
        {
            ViewModel?.PushKeybord?.Execute(
            (ctrl, key) switch
            {
                (false, "0") => InputAction.Zero,
                (false, "1") => InputAction.One,
                (false, "2") => InputAction.Two,
                (false, "3") => InputAction.Three,
                (false, "4") => InputAction.Four,
                (false, "5") => InputAction.Five,
                (false, "6") => InputAction.Six,
                (false, "7") => InputAction.Seven,
                (false, "8") => InputAction.Eight,
                (false, "9") => InputAction.Nine,
                (false, ".") => InputAction.Dot,
                (false, "+") => InputAction.Plus,
                (false, "-") => InputAction.Minus,
                (false, "*") => InputAction.Multiply,
                (false, "/") => InputAction.Divide,
                (false, "Enter)") or (false, "=") => InputAction.Equal,
                (false, "Escape") => InputAction.C,
                (false, "Delete") => InputAction.CE,
                (false, "Backspace") => InputAction.Backspace,
                (true, "z") => InputAction.Undo,
                (true, "y") => InputAction.Redo,
                _ => throw new NotSupportedException()
            });
        }
    }

}